/*
 * @lc app=leetcode.cn id=190 lang=csharp
 *
 * [190] 颠倒二进制位
 */

// @lc code=start
public class Solution190
{
    public uint reverseBits(uint n)
    {
        //解法1：
        // uint reverse = 0;
        // for(int i = 0; i < 32; i++)
        // {
        //     reverse += ((n & 1 ) << (31 - i));
        //     n = n >> 1;
        // }
        // return reverse;

        //解法2：分治算法
        //16位左右两部分交换
        n = (n >> 16) | (n << 16);
        //8位左右两部分交换
        n = ((n & 0b00000000111111110000000011111111) << 8) | ((n & 0b11111111000000001111111100000000) >> 8);
        // 4位左右两部分交换
        n = ((n & 0b00001111000011110000111100001111) << 4) | ((n & 0b11110000111100001111000011110000) >> 4);
        // 2位左右两部分交换
         n = ((n & 0b00110011001100110011001100110011) << 2) | ((n & 0b11001100110011001100110011001100) >> 2);
        // 1位左右两部分交换
        n = ((n & 0b01010101010101010101010101010101) << 1) | ((n & 0b10101010101010101010101010101010) >> 1);
        return n;
    }
}
// @lc code=end

